# 오디오스(Audios) 개발 기획서

## 1. 프로젝트 개요

### 1.1 비전 및 목표

#### 핵심 가치 제안
- **One-Touch Media Conversion**: 복잡한 설정 없이 원터치로 미디어 파일 변환
- **Professional Audio Editing**: 전문가 수준의 오디오/비디오 편집 기능을 모바일에서 구현
- **Seamless Integration**: 안드로이드 시스템과 완벽한 통합으로 직관적인 사용자 경험 제공

#### 주요 목표 (SMART 기준)
- **Specific**: 동영상→오디오, 오디오→오디오 포맷 변환 및 편집 기능 구현
- **Measurable**: 출시 3개월 내 일일 활성 사용자(DAU) 10,000명 달성
- **Achievable**: MVP 4주, 전체 개발 14주 내 완성
- **Relevant**: 콘텐츠 크리에이터와 일반 사용자의 미디어 편집 니즈 충족
- **Time-bound**: 2024년 Q2 내 정식 출시

#### 성공 지표 (KPI)
- 변환 성공률: 99% 이상
- 평균 변환 시간: 5분 미만 (10분 영상 기준)
- 앱 크래시율: 0.5% 미만
- 사용자 리텐션: D7 40%, D30 25%
- 앱스토어 평점: 4.3 이상

---

### 1.2 타겟 사용자

#### 페르소나 정의

**페르소나 1: 콘텐츠 크리에이터 김유튜버(28세)**
- 직업: 프리랜서 영상 크리에이터
- 니즈: 외부에서 촬영한 영상의 오디오만 빠르게 추출
- 페인포인트: PC 없이 모바일에서 바로 작업하고 싶음
- 사용 시나리오: 인터뷰 영상에서 팟캐스트용 오디오 추출

**페르소나 2: 일반 사용자 이직장인(35세)**
- 직업: 회사원
- 니즈: 회의 녹음 파일을 다양한 포맷으로 변환
- 페인포인트: 복잡한 설정 없이 간단하게 사용하고 싶음
- 사용 시나리오: 회의 녹음을 압축하여 이메일로 전송

#### 사용자 니즈 분석
- **빠른 변환**: 이동 중에도 신속한 파일 변환
- **품질 보장**: 원본 품질 최대한 유지
- **편집 기능**: 불필요한 부분 제거, 구간 편집
- **다양한 포맷**: MP3, WAV, AAC, FLAC 등 지원
- **저장 관리**: 변환 파일 체계적 관리

#### 사용자 여정 맵
```
발견 → 설치 → 권한설정 → 파일선택 → 변환설정 → 변환진행 → 편집 → 저장/공유
  ↓       ↓        ↓         ↓         ↓         ↓        ↓       ↓
광고    스토어   온보딩    갤러리   옵션선택   진행바   에디터   완료화면
```

---

## 2. 기능 명세

### 2.1 핵심 기능

#### 우선순위별 기능 목록 (MoSCoW 방법론)

**Must Have (필수)**
- 비디오→오디오 변환 (MP4, AVI, MOV → MP3, WAV, AAC)
- 오디오→오디오 변환 (포맷 변경, 비트레이트 조정)
- 변환 파일 내부 저장소 관리
- 기본 오디오 플레이어
- 파일 공유 기능
- 필수 권한 관리

**Should Have (권장)**
- 오디오 편집 (자르기, 합치기)
- 비디오 편집 (구간 자르기)
- 파형 시각화
- 배치 변환

**Could Have (선택)**
- 클라우드 백업
- 이퀄라이저
- 노이즈 제거
- 자막 추출

**Won't Have (제외)**
- 실시간 스트리밍
- 소셜 미디어 직접 업로드

#### 기능별 상세 설명

**1. 미디어 변환 엔진**
- FFmpeg 라이브러리 활용
- 백그라운드 서비스로 변환 진행
- 다중 코덱 지원 (H.264, H.265, VP9)
- 하드웨어 가속 활용 (MediaCodec API)

**2. 파일 관리 시스템**
- 내부 저장소 구조화 (/Audios/Converted, /Audios/Edited)
- 메타데이터 관리 (제목, 아티스트, 앨범)
- 썸네일 자동 생성
- 파일 검색 및 정렬

**3. 오디오 에디터**
- 파형 렌더링 및 줌인/아웃
- 구간 선택 및 자르기
- 페이드 인/아웃 효과
- 실시간 미리듣기

#### User Story

```
As a 콘텐츠 크리에이터
I want to 촬영한 영상에서 오디오만 추출
So that 팟캐스트 콘텐츠로 활용할 수 있다

Acceptance Criteria:
- 갤러리에서 영상 선택 가능
- MP3, WAV, AAC 중 선택
- 비트레이트 설정 가능 (128/192/256/320 kbps)
- 변환 진행률 표시
- 완료 시 알림
```

---

### 2.2 기술 요구사항

#### 프론트엔드 기술 스택
```
- Language: Java 11
- Min SDK: API 24 (Android 7.0)
- Target SDK: API 34 (Android 14)
- IDE: Android Studio Iguana
- UI Framework: Material Design 3
- View Binding: enabled
- Architecture: MVVM + Repository Pattern
```

#### 백엔드 기술 스택
```
- Local Database: Room 2.6.0
- File Processing: FFmpeg Android (4.4)
- Audio Processing: Android AudioTrack/MediaCodec
- Dependency Injection: Dagger Hilt 2.48
- Async: Kotlin Coroutines interop
- Network: Retrofit 2.9 (for future cloud features)
```


---

## 3. 화면 설계

### 3.1 Information Architecture

#### 사이트맵
```
오디오스 앱
├── 스플래시
├── 권한 요청
├── 메인 화면
│   ├── 변환 탭
│   │   ├── 파일 선택
│   │   ├── 변환 설정
│   │   └── 변환 진행
│   ├── 라이브러리 탭
│   │   ├── 변환 파일 목록
│   │   ├── 파일 상세
│   │   └── 플레이어
│   └── 편집 탭
│       ├── 오디오 에디터
│       └── 비디오 에디터
└── 설정
    ├── 저장 위치
    ├── 기본 설정
    └── 앱 정보
```

#### 주요 화면 플로우
```
[앱 시작] → [권한 체크] → [메인 화면]
                ↓
        [권한 요청 다이얼로그]
                ↓
    [파일 선택] → [변환 설정] → [변환 진행] → [완료]
         ↓                                      ↓
    [편집 화면]                            [라이브러리]
```

---

### 3.2 Wireframe

#### 메인 화면 (변환 탭)
```
┌─────────────────────────┐
│  ≡  오디오스      ⚙️    │
├─────────────────────────┤
│ [변환] [라이브러리] [편집] │
├─────────────────────────┤
│                         │
│    📹 ➜ 🎵             │
│                         │
│  ┌───────────────┐      │
│  │               │      │
│  │  파일 선택     │      │
│  │      +        │      │
│  │               │      │
│  └───────────────┘      │
│                         │
│  최근 변환 파일          │
│  ┌─────────────────┐    │
│  │ 🎵 audio_001.mp3│    │
│  │    2024.03.20   │    │
│  └─────────────────┘    │
│                         │
└─────────────────────────┘
```

#### 변환 설정 화면
```
┌─────────────────────────┐
│  ←  변환 설정      ✓    │
├─────────────────────────┤
│                         │
│  선택 파일               │
│  ┌─────────────────┐    │
│  │ 📹 video.mp4    │    │
│  │ 10:23 | 125MB  │    │
│  └─────────────────┘    │
│                         │
│  출력 형식               │
│  ○ MP3  ● WAV  ○ AAC   │
│                         │
│  비트레이트              │
│  [────────●─────] 256   │
│   128        320 kbps   │
│                         │
│  예상 크기: ~8.5 MB      │
│                         │
│  [ 변환 시작 ]          │
│                         │
└─────────────────────────┘
```

#### 오디오 편집 화면
```
┌─────────────────────────┐
│  ←  오디오 편집    💾   │
├─────────────────────────┤
│  ⏮ ▶️ ⏭  00:45/03:20  │
├─────────────────────────┤
│                         │
│  ∿∿∿∿∿∿∿∿∿∿∿∿∿∿∿  │
│  ∿∿∿∿∿∿∿∿∿∿∿∿∿∿∿  │
│  [====|-----------|]    │
│                         │
├─────────────────────────┤
│  ✂️ 자르기  🔗 합치기    │
│  🔊 볼륨   ⚡ 효과      │
└─────────────────────────┘
```

---

## 4. UI/UX 디자인

### 4.1 디자인 시스템

#### 컬러 팔레트
```
Primary: #6750A4 (Deep Purple)
Secondary: #958DA5 (Light Purple)
Accent: #FFAB00 (Amber)
Background: #FFFBFE (Light)
Surface: #FEF7FF (Very Light Purple)
Error: #BA1A1A
Success: #4CAF50
```

#### 타이포그래피
```
- Display: Roboto 32sp (Bold)
- Headline: Roboto 24sp (Medium)
- Body: Roboto 16sp (Regular)
- Caption: Roboto 12sp (Regular)
- 행간: 1.5
- 자간: 0.5
```

#### 그리드 시스템
- 8dp 베이스 그리드
- 16dp 마진
- 8dp 거터
- 최대 컨텐츠 너비: 600dp (태블릿)

#### 컴포넌트 라이브러리
- Material Design 3 Components
- Custom WaveformView
- CircularProgressButton
- FilePickerCard
- AudioPlayerBar

---

### 4.2 UX 원칙

#### 접근성 고려사항 (WCAG 2.1 기준)
- 최소 터치 영역: 48x48dp
- 색상 대비율: 4.5:1 이상
- TalkBack 완벽 지원
- 대체 텍스트 제공
- 키보드 네비게이션 지원

#### 반응형 디자인 전략
```
- Phone Portrait: 1 column layout
- Phone Landscape: 2 column layout
- Tablet: Master-Detail pattern
- Foldable: Adaptive layout
```

#### 마이크로 인터랙션
- 파일 선택 시 리플 효과
- 변환 진행 시 웨이브 애니메이션
- 완료 시 체크마크 애니메이션
- 스와이프로 삭제 제스처
- 길게 눌러 다중 선택

#### 에러 처리 및 피드백
- 토스트 메시지 (일반 알림)
- 스낵바 (실행 취소 가능한 액션)
- 다이얼로그 (중요 확인)
- 인라인 에러 (폼 검증)

---

### 4.3 프로토타입

#### 주요 사용자 플로우

**플로우 1: 첫 실행 → 변환**
```
1. 스플래시 (2초)
2. 권한 요청 (저장소, 미디어)
3. 온보딩 (3단계 스와이프)
4. 메인 화면
5. 파일 선택기
6. 변환 설정
7. 변환 진행 (프로그레스)
8. 완료 및 재생
```

**플로우 2: 오디오 편집**
```
1. 라이브러리에서 파일 선택
2. 편집 버튼 탭
3. 파형 로딩
4. 구간 선택 (드래그)
5. 자르기 실행
6. 미리듣기
7. 저장 또는 취소
```

#### 인터랙션 시나리오
- **시나리오 1**: 사용자가 10개 파일을 한 번에 변환
- **시나리오 2**: 변환 중 앱을 백그라운드로 전환
- **시나리오 3**: 저장 공간 부족 시 처리

#### 엣지 케이스 처리
- 네트워크 연결 끊김 (오프라인 모드)
- 배터리 부족 경고
- 대용량 파일 처리 (>1GB)
- 손상된 파일 처리
- 동시 다중 작업

---

## 5. 개발 로드맵

### 5.1 페이즈별 계획

#### Phase 1: MVP (4주)
**Week 1-2: 기초 설정**
- 프로젝트 구조 설정
- 권한 관리 시스템
- 파일 선택기 구현
- 기본 UI 레이아웃

**Week 3-4: 핵심 기능**
- FFmpeg 통합
- 비디오→오디오 변환
- 기본 플레이어
- 로컬 저장소 관리

#### Phase 2: 핵심 기능 확장 (6주)
**Week 5-6: 변환 고도화**
- 다중 포맷 지원
- 비트레이트 설정
- 배치 변환
- 변환 히스토리

**Week 7-8: 편집 기능**
- 파형 시각화
- 오디오 자르기
- 구간 선택 UI
- 편집 취소/재실행

**Week 9-10: 비디오 편집**
- 비디오 프리뷰
- 타임라인 UI
- 구간 자르기
- 썸네일 생성

#### Phase 3: 최적화 및 확장 (4주)
**Week 11-12: 성능 최적화**
- 메모리 최적화
- 배터리 사용 최적화
- UI 애니메이션 개선
- 크래시 수정

**Week 13-14: 추가 기능**
- 클라우드 백업 (선택)
- 공유 기능 강화
- 다크 모드
- 출시 준비

---

### 5.2 기술 아키텍처

```
┌──────────────────────────────────────┐
│          Presentation Layer          │
│  ┌──────────┐ ┌──────────┐ ┌──────┐ │
│  │Activities│ │Fragments │ │Views │ │
│  └──────────┘ └──────────┘ └──────┘ │
│         ↓          ↓           ↓     │
│  ┌──────────────────────────────┐   │
│  │      ViewModels (MVVM)       │   │
│  └──────────────────────────────┘   │
└──────────────────────────────────────┘
                    ↓
┌──────────────────────────────────────┐
│          Business Layer              │
│  ┌──────────┐ ┌──────────┐ ┌──────┐ │
│  │Use Cases │ │Repository│ │Models│ │
│  └──────────┘ └──────────┘ └──────┘ │
└──────────────────────────────────────┘
                    ↓
┌──────────────────────────────────────┐
│            Data Layer                │
│  ┌──────┐ ┌──────┐ ┌──────────────┐ │
│  │ Room │ │FFmpeg│ │File System   │ │
│  │  DB  │ │ Lib  │ │   Manager    │ │
│  └──────┘ └──────┘ └──────────────┘ │
└──────────────────────────────────────┘
```

**모듈 구조**
```
app/
├── src/main/java/com/audios/
│   ├── presentation/
│   │   ├── main/
│   │   ├── converter/
│   │   ├── editor/
│   │   └── player/
│   ├── domain/
│   │   ├── models/
│   │   ├── usecases/
│   │   └── repositories/
│   ├── data/
│   │   ├── local/
│   │   ├── remote/
│   │   └── repositories/
│   └── utils/
│       ├── ffmpeg/
│       ├── permissions/
│       └── extensions/
```



### 6 성능 목표

#### 핵심 성능 지표
- **앱 시작 시간**: Cold start < 2초
- **파일 로딩**: 100MB 파일 < 1초
- **변환 속도**: 실시간 대비 3배 이상
- **메모리 사용**: 최대 200MB
- **배터리 소모**: 시간당 5% 미만

#### API 응답 시간
- 로컬 파일 접근: <50ms
- DB 쿼리: <100ms
- 미리보기 생성: <500ms
- 파형 렌더링: <200ms

#### 동시 처리 능력
- 동시 변환 작업: 3개
- 백그라운드 작업: 무제한
- 파일 목록 로딩: 1000개 이상

---


#### 경쟁 앱 분석

**1. Video to MP3 Converter**
- 장점: 간단한 UI, 빠른 변환
- 단점: 편집 기능 부재, 광고 과다
- 차별화: 편집 기능, 광고 최소화

**2. Timbre**
- 장점: 다양한 편집 기능
- 단점: 복잡한 UI, 느린 처리
- 차별화: 직관적 UI, 최적화

**3. MP3 Video Converter**
- 장점: 다양한 포맷 지원
- 단점: 불안정, 크래시 빈발
- 차별화: 안정성, 품질 보증

#### 핵심 차별화 포인트
1. **Material You 디자인** 적용
2. **실시간 파형 편집** 제공
3. **백그라운드 다중 처리** 지원
4. **오프라인 완벽 동작**
5. **무료 + 광고 최소화**

---

### Claude Code 통합 워크플로우
1. 프로젝트 구조 초기화
2. 코드 생성 템플릿 설정
3. 자동 테스트 파이프라인
4. 지속적 통합 설정

---
